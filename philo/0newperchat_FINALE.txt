
void print_meals_status(t_table *table)
{
    int i;
    printf("\nMeals status:\n");
    for (i = 0; i < table->n_philo; i++)
    {
        safe_mutex(LOCK, &table->philos[i].philo_lock);
        printf("Philosopher %d has eaten %d meals\n", 
               table->philos[i].id, 
               table->philos[i].eat_count);
        safe_mutex(UNLOCK, &table->philos[i].philo_lock);
    }
    printf("\n");
}


// Funzione per stampare i messaggi di stato
void print_status(t_philo *philo, char *msg)
{
    safe_mutex(LOCK, &philo->table->write_lock);
    if (!philo->table->dead && !philo->table->end)
    {
        uint64_t current_time = get_time() - philo->table->start_time;
        printf("%lu %d %s", current_time, philo->id, msg);
    }
    safe_mutex(UNLOCK, &philo->table->write_lock);
}


void *meals_monitor(void *arg)
{
    t_table *table = (t_table *)arg;
    int i;
    int all_finished;

    while (!table->dead)
    {
        i = 0;
        all_finished = 1;
        safe_mutex(LOCK, &table->table_lock);
        
        // Controlla che TUTTI i filosofi abbiano mangiato abbastanza
        while (i < table->n_philo && table->max_meals != -1)
        {
            safe_mutex(LOCK, &table->philos[i].philo_lock);
            if (table->philos[i].eat_count < table->max_meals)
            {
                all_finished = 0;
                safe_mutex(UNLOCK, &table->philos[i].philo_lock);
                safe_mutex(UNLOCK, &table->table_lock);
                break;
            }
            safe_mutex(UNLOCK, &table->philos[i].philo_lock);
            i++;
        }

        // Se abbiamo controllato tutti i filosofi e tutti hanno finito
        if (i == table->n_philo && all_finished && table->max_meals != -1)
        {
            table->end = 1;
            safe_mutex(UNLOCK, &table->table_lock);
            
            safe_mutex(LOCK, &table->write_lock);
            printf("%lu All philosophers have eaten enough meals!\n", 
                get_time() - table->start_time);
            print_meals_status(table);
            safe_mutex(UNLOCK, &table->write_lock);
            return (NULL);
        }
        
        if (!all_finished)
            usleep(1000);
        else
            safe_mutex(UNLOCK, &table->table_lock);
    }
    return (NULL);
}


// Versione aggiornata del supervisor
void *supervisor(void *arg)
{
    t_philo *philo = (t_philo *)arg;
    uint64_t current_time;
    
    while (!philo->table->dead && !philo->table->end)
    {
        safe_mutex(LOCK, &philo->philo_lock);
        current_time = get_time();
        if (!philo->eating && 
            (current_time - philo->time_to_die > philo->table->time_to_die))
        {
            print_status(philo, DIE);
            safe_mutex(LOCK, &philo->table->table_lock);
            philo->table->dead = 1;
            safe_mutex(UNLOCK, &philo->table->table_lock);
            safe_mutex(UNLOCK, &philo->philo_lock);
            break;
        }
        safe_mutex(UNLOCK, &philo->philo_lock);
        usleep(1000);
    }
    return (NULL);
}

static void eating(t_philo *philo)
{
    // Controllo dello stato `end` prima di prendere le forchette
    if (get_bool(&philo->table->table_lock, &philo->table->end))
        return;

    // Prendere la forchetta destra
    safe_mutex(LOCK, philo->r_fork);
    if (get_bool(&philo->table->table_lock, &philo->table->end)) {
        safe_mutex(UNLOCK, philo->r_fork);
        return; // Terminare se l'esecuzione è conclusa
    }
    print_status(philo, TAKE_FORK);

    // Prendere la forchetta sinistra
    safe_mutex(LOCK, philo->l_fork);
    if (get_bool(&philo->table->table_lock, &philo->table->end)) {
        safe_mutex(UNLOCK, philo->l_fork);
        safe_mutex(UNLOCK, philo->r_fork);
        return; // Terminare se l'esecuzione è conclusa
    }
    print_status(philo, TAKE_FORK);

    // Iniziare a mangiare
    safe_mutex(LOCK, &philo->philo_lock);
    philo->eating = 1;
    philo->time_to_die = get_time();
    philo->eat_count++; // Incrementa il contatore dei pasti
    print_status(philo, EAT);
    safe_mutex(UNLOCK, &philo->philo_lock);

    usleep(philo->table->time_to_eat * 1000);

    // Terminare il pasto
    safe_mutex(LOCK, &philo->philo_lock);
    philo->eating = 0;
    safe_mutex(UNLOCK, &philo->philo_lock);

    // Rilasciare le forchette
    safe_mutex(UNLOCK, philo->l_fork);
    safe_mutex(UNLOCK, philo->r_fork);
}


void *philo_routine(void *arg)
{
    t_philo *philo = (t_philo *)arg;
    pthread_t supervisor_thread;
    
    // Avvia sempre il supervisor, anche per un solo filosofo
    safe_thread(&supervisor_thread, supervisor, philo, CREATE);
    safe_thread(&supervisor_thread, NULL, NULL, DETACH);
    
    // Caso speciale per un solo filosofo
    if (philo->table->n_philo == 1)
    {
        safe_mutex(LOCK, philo->r_fork);
        print_status(philo, TAKE_FORK);
        usleep(philo->table->time_to_die * 1000); // Aspetta di morire
        safe_mutex(UNLOCK, philo->r_fork);
        return (NULL);
    }
    
    if (philo->id % 2 == 0)
        usleep(1000);
    
    while (!philo->table->dead && !philo->table->end)
    {
        eating(philo);
        
        safe_mutex(LOCK, &philo->table->table_lock);
        if (philo->table->max_meals != -1 && 
            philo->eat_count >= philo->table->max_meals)
        {
            safe_mutex(UNLOCK, &philo->table->table_lock);
            break;
        }
        safe_mutex(UNLOCK, &philo->table->table_lock);
        
        print_status(philo, SLEEP);
        usleep(philo->table->time_to_sleep * 1000);
        print_status(philo, THINK);
    }
    return (NULL);
}


// Versione aggiornata della funzione start_simulation
int start_simulation(t_table *table)
{
    int i;
    pthread_t monitor;

    // Se c'è un solo filosofo, non avviare il monitor dei pasti
    // perché il filosofo non potrà mai mangiare
    table->start_time = get_time();
    
    if (table->n_philo > 1 && table->max_meals != -1)
    {
        safe_thread(&monitor, meals_monitor, table, CREATE);
        safe_thread(&monitor, NULL, NULL, DETACH);
    }

    // Avvia tutti i filosofi
    i = 0;
    while (i < table->n_philo)
    {
        if (safe_thread(&table->tid[i], philo_routine, &table->philos[i], CREATE) != 0)
        {
            table->end = 1;  // Segnala a tutti i thread di terminare
            return (1);
        }
        i++;
    }

    return (0);
}


void cleanup_table(t_table *table)
{
    int i;

    // Attendi che tutti i filosofi terminino
    i = 0;
    while (i < table->n_philo)
    {
        safe_thread(&table->tid[i], NULL, NULL, JOIN);
        i++;
    }

    // Aspetta un momento per assicurarsi che tutti i messaggi siano stampati
    usleep(1000);

    // Distruggi i mutex delle forchette e dei filosofi
    i = 0;
    while (i < table->n_philo)
    {
        safe_mutex(DESTROY, &table->forks[i]);
        safe_mutex(DESTROY, &table->philos[i].philo_lock);
        i++;
    }

    // Distruggi i mutex del tavolo
    safe_mutex(DESTROY, &table->table_lock);
    safe_mutex(DESTROY, &table->write_lock);

    // Libera la memoria allocata
    if (table->tid)
        free(table->tid);
    if (table->philos)
        free(table->philos);
    if (table->forks)
        free(table->forks);
}


void    set_int(pthread_mutex_t *mutex, int *value, int new_value)
{
    pthread_mutex_lock(mutex);
    *value = new_value;
    pthread_mutex_unlock(mutex);
}

int get_int(pthread_mutex_t *mutex, int *value)
{
    int ret;

    pthread_mutex_lock(mutex);
    ret = *value;
    pthread_mutex_unlock(mutex);
    return (ret);
}

void    set_ulong(pthread_mutex_t *mutex, unsigned long *value,
        unsigned long new_value)
{
    pthread_mutex_lock(mutex);
    *value = new_value;
    pthread_mutex_unlock(mutex);
}

unsigned long get_ulong(pthread_mutex_t *mutex, unsigned long *value)
{
    unsigned long ret;

    pthread_mutex_lock(mutex);
    ret = *value;
    pthread_mutex_unlock(mutex);
    return (ret);
}

// Incrementa un intero in modo sicuro utilizzando un mutex (mutex_intincr)
int safe_intplus(pthread_mutex_t *mutex, int *value)
{
    int ret;

    pthread_mutex_lock(mutex);
    *value += 1;
    ret = *value;
    pthread_mutex_unlock(mutex);
    return (ret);
}

void    set_bool(pthread_mutex_t *mutex, bool *var, bool value)
{
    pthread_mutex_lock(mutex);
    *var = value;
    pthread_mutex_unlock(mutex);
}

bool    get_bool(pthread_mutex_t *mutex, bool *var)
{
    bool value;

    pthread_mutex_lock(mutex);
    value = *var;
    pthread_mutex_unlock(mutex);
    return (value);
}

void set_simulation_state(t_table *table, t_simulation_state new_state)
{
    safe_mutex(LOCK, &table->table_lock);
    table->sim_state = new_state;
    safe_mutex(UNLOCK, &table->table_lock);
}

t_simulation_state get_simulation_state(t_table *table)
{
    t_simulation_state state;
    
    safe_mutex(LOCK, &table->table_lock);
    state = table->sim_state;
    safe_mutex(UNLOCK, &table->table_lock);
    return state;
}


static void init_philos(t_table *table)
{
    int i;
    
    i = 0;
    while (i < table->n_philo)
    {
        table->philos[i].id = i + 1;
        table->philos[i].table = table;
        table->philos[i].eat_count = 0;
        table->philos[i].status = 0;
        table->philos[i].eating = 0;
        table->philos[i].time_to_die = get_time();
        safe_mutex(INIT, &table->philos[i].philo_lock);
        table->philos[i].r_fork = &table->forks[i];
        table->philos[i].l_fork = &table->forks[(i + 1) % table->n_philo];
        i++;
    }
}

static void init_forks(t_table *table)
{
    int i;

    i = 0;
    while (i < table->n_philo)
    {
        safe_mutex(INIT, &table->forks[i]);
        i++;
    }
}

// Funzione principale di inizializzazione
void init_table(t_table *table)
{
    // Alloca memoria per i thread
    table->tid = safe_malloc(sizeof(pthread_t) * table->n_philo);
    // Alloca memoria per i filosofi
    table->philos = safe_malloc(sizeof(t_philo) * table->n_philo);
    // Alloca memoria per le forchette
    table->forks = safe_malloc(sizeof(pthread_mutex_t) * table->n_philo);
    
    // Inizializza i mutex del tavolo
    safe_mutex(INIT, &table->table_lock);
    safe_mutex(INIT, &table->write_lock);
    
    // Inizializza altre variabili del tavolo
    table->dead = 0;
    table->end = 0;
    table->start_time = 0;
    
    // Inizializza forchette e filosofi
    init_forks(table);
    init_philos(table);
}

void   input_check(t_table *table)
{
    if (table->n_philo > MAX_PHILO)
    {
        error_exit(WRONG_ARGV);
    }
    if ((table->time_to_die < 60 || table->time_to_die > INT_MAX) || (table->time_to_eat < 60
        || table->time_to_eat > INT_MAX) || (table->time_to_sleep < 60 || table->time_to_sleep > INT_MAX))
    {
        error_exit(WRONG_TIME);
    }
    if (table->max_meals >= INT_MAX || (table->max_meals == 0 || table->max_meals < -1))
    {
        if (table->max_meals == INT_MAX)
            error_exit(MAX);
        else
            error_exit(NEGATIVE);
    }
}

void input_init(t_table *table, int argc, char **argv)
{
    table->n_philo = ft_atoi(argv[1]);
    table->time_to_die = ft_atoi(argv[2]);
    table->time_to_eat = ft_atoi(argv[3]);
    table->time_to_sleep = ft_atoi(argv[4]);
    if (argc == 6)
        table->max_meals = ft_atoi(argv[5]);
    else
        table->max_meals = -1;    
    input_check(table);
    init_table(table);
}


// Main aggiornato con gestione completa
int main(int argc, char **argv)
{
    t_table table;

    if (argc < 5 || argc > 6)
        error_exit("Error: Invalid number of arguments\n");
    
    // Inizializza la struttura
    input_init(&table, argc, argv);
    
    // Avvia la simulazione
    if (start_simulation(&table) != 0)
    {
        cleanup_table(&table);
        error_exit("Error: Failed to start simulation\n");
    }

    // Attende e pulisce
    cleanup_table(&table);
    return (0);
}


int is_valid_digit(char c)
{
    if (c >= '0' && c <= '9')
        return 1;
    return 0;
}

int parse_number(const char *str, int *i, int *found_digit)
{
    int res;

    res = 0;
    *found_digit = 0;
    while (str[*i] && (is_valid_digit(str[*i]) || str[*i] == ' '))
    {
        if (is_valid_digit(str[*i]))
        {
            if (res > INT_MAX / 10 || (res == INT_MAX / 10 && 
                (str[*i] - '0') > INT_MAX % 10))
            {
                error_exit(MAX);
            }
            res = res * 10 + (str[*i] - '0');
            *found_digit = 1;
        }
        (*i)++;
    }
    return res;
}

int ft_atoi(const char *str)
{
    int i;
    int found_digit;
    int res;

    i = 0;
    while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
        i++;
    if (str[i] == '-' || str[i] == '+')
    {
        if (str[i] == '-')
            error_exit(NEGATIVE);
        i++;
    }
    res = parse_number(str, &i, &found_digit);
    if (!found_digit)
        error_exit(NAN);
    if (str[i] != '\0')
        error_exit(WRONG_ARGV);
    return res;
}


void *safe_malloc(size_t size)
{
    void *ret;

    ret = malloc(size);
    if (ret == NULL)
    {
        error_exit("Error: Malloc failed :(\n");
    }
    return (ret);
}

void mutex_error(int status, t_opcode opcode) 
{
    if (status == 0)
        return;
    if (status == EINVAL)
    {
        if (opcode == INIT)
            error_exit("Error: Invalid attribute value :(\n");
        else
            error_exit("Error: Invalid mutex value :(\n");
    }
    else if (status == EDEADLK)
        error_exit("Error: A deadlock condition was detected :(\n");
    else if (status == EAGAIN)
        error_exit("Error: Max number of recursive locks exceeded :(\n");
    else if (status == ENOMEM)
        error_exit("Error: Insufficient memory for mutex initialization :(\n");
    else if (status == EBUSY)
        error_exit("Error: The mutex is already locked :(\n");
    else if (status == EPERM)
        error_exit("Error: Current thread does not hold a lock on the mutex :(\n");
    else
        error_exit("Error: Mutex operation failed :(\n");
}

int safe_mutex(t_opcode opcode, pthread_mutex_t *mutex)
{
    int status = 0;

    if (opcode == LOCK)
        status = pthread_mutex_lock(mutex);
    else if (opcode == UNLOCK)
        status = pthread_mutex_unlock(mutex);
    else if (opcode == INIT)
        status = pthread_mutex_init(mutex, NULL);
    else if (opcode == DESTROY)
        status = pthread_mutex_destroy(mutex);
    else
        error_exit("Error: Invalid opcode :(\n");
    mutex_error(status, opcode);
    return status;  // Restituisci lo stato per il controllo esterno
}

static void thread_error(int status, t_opcode op) 
{
    if (status == 0)
        return;

    if (status == EINVAL) {
        if (op == JOIN || op == DETACH)
            error_exit("Error: Invalid thread or the thread is not joinable :(\n");
        else
            error_exit("Error: Invalid thread attributes :(\n");
    }
    else if (status == EPERM)
        error_exit("Error: No permission to join or detach the thread :(\n");
    else if (status == ESRCH)
        error_exit("Error: No thread with the ID could be found :(\n");
    else if (status == EDEADLK)
        error_exit("Error: A deadlock was detected :(\n");
    else
        error_exit("Error: Thread operation failed :(\n");
}

int safe_thread(pthread_t *thread, void *(*func)(void *), void *arg, t_opcode op)
{
    int status = 0;

    if (op == CREATE)
        status = pthread_create(thread, NULL, func, arg);
    else if (op == JOIN)
        status = pthread_join(*thread, NULL);
    else if (op == DETACH)
        status = pthread_detach(*thread);
    else
        error_exit("Error: Invalid thread operation :(\n");
    
    thread_error(status, op);
    return status;  // Aggiungiamo il return
}


void error_exit(char *message)
{
    printf("%s\n", message);
    exit(1);
}


uint64_t get_time(void)
{
    struct timeval tv;
    
    if (gettimeofday(&tv, NULL) != 0)
    {
        perror("gettimeofday failed");
        return -1;  // Valore di errore
    }
    return ((tv.tv_sec * (uint64_t)1000) + (tv.tv_usec / 1000));
}
